obslight-fakeobs
--------------------
Python script that partially implements an OBS API.
It does not build anything, but can be used as an OBS remote link.

You can use it for example to build your own project against a fixed
release of a public project (Tizen, MeeGo...), without the drawbacks
of a slow/unreliable internet connection.

It is based on Mer Delivery System tools
http://wiki.merproject.org/index.php?title=Mer_Delivery_System

modified for the needs of OBS Light project
http://wiki.meego.com/OBS_Light

RPM packages for openSUSE 11.4 and 12.1:
http://repo.pub.meego.com/Project:/OBS_Light/
Python dependencies (python-async, python-gitdb, python-smmap):
http://download.opensuse.org/repositories/devel:/languages:/python/


All commands should be run as root.

Where are fakeobs data stored ?
-------------------------------
fakeobs data are stored in /srv/fakeobs and its subdirectories.
The daemon log file is /var/log/fakeobs.log


On which port does fakeobs API listen ?
---------------------------------------
fakeobs API listens on port 8001.
You can test if it is running by calling
  http://<your_host>:8001/public/source/
in your web browser. You should see a 404 error, which
proves the daemon is listening.
If you see "Unable to connect", the daemon is probably stopped.
Try "rcfakeobs start".


On which port are published the package repositories ?
------------------------------------------------------
The package repositories are published on port 8002.


How to create a link to the fake OBS on the real OBS ?
------------------------------------------------------
- If they run on the same host (we hope so), you can run
  "obslight-fakeobs createlink", optionally with the path to your
  ".oscrc" file (without it, the script will try the default port, user
  and password of an OBS appliance http://susestudio.com/a/e0uuBG/meego-obs).
- If they don't, we suggest you to follow this guide
http://en.opensuse.org/openSUSE:Build_Service_private_instance_boot_strapping#Use_OBS_Remote_Link
  and replace
     "https://api.meego.com/public"
  by
     "http://<your_host>:8001/public"

Note: you have to do this only once. All fakeobs projects will be used
      through the same link.


How to import a fakeobs project from an archive ?
-------------------------------------------------
Run "obslight-fakeobs import" with the archive path as parameter,
and optionally the name of the project as second parameter
('_' in archive name will be replaced by ':' when guessing project name).
A "<project>.manifest" file will be created ; do not remove it, it will
be used when removing the project.

Example:
$ obslight-fakeobs import Tizen_1.0_Base-1.0.tar.gz "Tizen:1.0:Base"

Warning: if you try to import an archive with a different release,
         source files of the old release will be overwritten (but
         binaries will be kept). We suggest you to maintain only one
         release for each project at a time.


How to remove a fakeobs project ?
---------------------------------
Run "obslight-fakeobs remove" with the project name as parameter.
All releases of the project will be removed.

Example:
$ obslight-fakeobs remove "Tizen:1.0:Base"


Where can I find fakeobs projects archives ?
--------------------------------------------
Some archives for Tizen are available at http://tizen.fridu.net/.


Can I create fakeobs project archive myself ?
---------------------------------------------
You will need:
- a release name or number (please avoid white spaces)
- the name of the project
- the URL of the OBS public API you want to get project from
- the URL of the package repositories where the project is published
- the name of the repository target
- the list of architectures of the project

Step1: grab the project
  obslight-fakeobs grab <release> <api> <repo_url> <project_name> <repository> <architectures>
ex: obslight-fakeobs grab "1.0" "https://api.tizen.org/public" "rsync://download.tizen.org/live" "Tizen:1.0:Base" "standard" "i586 armv7el"
This will take some time, depending on your internet connection.
At this point, the project is installed locally as if you had done an import.

Step2: build the archive
  obslight-fakeobs export <project_name> <release>
ex: obslight-fakeobs export "Tizen:1.0:Base" "1.0"
Now you can find a big archive in /srv/fakeobs/ named after the project
(with ':' replaced by '_').
