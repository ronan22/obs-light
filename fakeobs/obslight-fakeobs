#!/bin/sh

LOGFILE="/var/log/fakeobs-cli.log"

function usage()
{
	cat <<EOF
Usage: $0 <command> [parameters]

Commands:
	createlink [osc_config_file]
		Create the link to the fakeobs API on the OBS running on localhost.
		osc_config_file, if provided, should be the osc configuration file
		of an administrator of the OBS server allowed to create links.

	export <project_name> <release>
		Export a project to an archive. The archive will be named
		"project_name-release.tar.gz", with all ':' replaced by '_'.
		(ex: "Tizen:1.0:Base" "1.0" -> "Tizen_1.0_Base-1.0.tar.gz")

	grab <release> <api> <repo_url> <project_name> <repository> <architectures>
		Grab a project from an OBS server
		 release:       a release name or number (ex: "1.0")
		 api:           the URL of the OBS API
		                (ex: "https://api.tizen.org")
		 repo_url:      the URL where to the package repositories where
		                the project is published
		                (ex: "rsync://download.tizen.org/live")
		 project_name:  the name of the project to grab
		                (ex: "Tizen:1.0:Base")
		 repository:    the name of the target repository to grab
		                (ex: "standard")
		 architectures: a list of architectures to grab
		                (ex: "i586 armv7el")

	import <archive.tar.gz>
		Import a project from an archive. For old archives which do not
		contain project_info, the name of the project will be guessed
		from archive name, and user will be asked for confirmation.

	remove <project_name>
		Remove a project from fakeobs. All releases are removed.

	list
		List projects already grabbed or imported

	check <subcommand> <project_name>
		Do some checks on a fakeobs project.
		Use "help" as subcommand for a better description.


Commands are logged in $LOGFILE
EOF
}

function echo_start_command()
{
	COMMAND="$@"
	DATE=`date`
	echo "--- $DATE - starting command: $COMMAND"
}

function get_abs_path()
{
	BASENAME="`basename $1`"
	DIRPATH="`dirname $1`"
	ABSPATH="`cd $DIRPATH; pwd`/$BASENAME"
	echo $ABSPATH
}

function export_project()
{
	if [ "$#" -lt 2 ]
	then
		echo "Too few arguments for 'export'!"
		usage
		exit 1
	fi
	cd /srv/fakeobs
	echo_start_command "export $@" >> $LOGFILE
	tools/export_fakeobs_project.sh "$@" 2>&1 | tee -a "$LOGFILE"
}

function grab_project()
{
	if [ "$#" -lt 6 ]
	then
		echo "Too few arguments for 'grab'!"
		usage
		exit 1
	fi
	cd /srv/fakeobs
	echo_start_command "grab $@" >> $LOGFILE
	tools/grab_fakeobs_project.sh "$@" 2>&1 | tee -a "$LOGFILE"
}

function import_project()
{
	if [ "$#" -lt 1 ]
	then
		echo "Too few arguments for 'import'!"
		usage
		exit 1
	fi
	ARCHIVE="`get_abs_path $1`"
	cd /srv/fakeobs
	echo_start_command "import $ARCHIVE" >> $LOGFILE
	tools/import_fakeobs_project.sh "$ARCHIVE" 2>&1 | tee -a "$LOGFILE"
}

function remove_project()
{
	if [ "$#" -lt 1 ]
	then
		echo "Too few arguments for 'remove'!"
		usage
		exit 1
	fi
	cd /srv/fakeobs
	echo_start_command "remove $@" >> $LOGFILE
	tools/remove_fakeobs_project.sh "$@" 2>&1 | tee -a "$LOGFILE"
}

function create_link()
{
	cd /srv/fakeobs
	if [ "$#" -gt 0 ]
	then
		OSCCONFIG="`get_abs_path $1`"
		echo_start_command "createlink $OSCCONFIG" >> $LOGFILE
		tools/create_fakeobs_link.sh $OSCCONFIG 2>&1 | tee -a "$LOGFILE"
	else
		echo_start_command "createlink" >> $LOGFILE
		tools/create_fakeobs_link.sh 2>&1 | tee -a "$LOGFILE"
	fi
}

function list_projects()
{
	cd /srv/fakeobs
	echo_start_command "list" >> $LOGFILE
	sed -r -n -e "s,.*project=\"([^ ]*)\".*,\1,p" /srv/fakeobs/mappings.xml 2>&1 | tee -a "$LOGFILE"
}

function run_check_project()
{
	if [ "$#" -lt 1 ]
	then
		echo "Too few arguments for 'check'!"
		usage
		exit 1
	fi
	cd /srv/fakeobs
	echo_start_command "check $@" >> $LOGFILE
	tools/check_fakeobs_project.sh "$@" 2>&1 | tee -a "$LOGFILE"
}

if [ "$#" -lt 1 ]
then
	usage
	exit 1
fi

function check_user_is_root()
{
	if [ "`whoami`" != "root" ]
	then
		echo "Please run this command as root"
		exit 1
	fi
}

COMMAND=$1
shift

case $COMMAND in
	version|--version)
		versionfile="/usr/share/doc/packages/obslight-fakeobs/VERSION"
		[ -f "$versionfile" ] && cat "$versionfile" || echo "unknown"
		exit 0
		;;
	help|--help)
		usage
		exit 0
		;;
	export)
		check_user_is_root
		export_project "$@"
		;;
	grab)
		check_user_is_root
		grab_project "$@"
		;;
	import)
		check_user_is_root
		import_project "$@"
		;;
	remove)
		check_user_is_root
		remove_project "$@"
		;;
	createlink)
		check_user_is_root
		create_link "$@"
		;;
	list)
		list_projects
		;;
	check)
		check_user_is_root
		run_check_project "$@"
		;;
	*)
		echo "Unknown command: $COMMAND"
		usage
		exit 1
		;;
esac

